/* uva 12166:Equilibrium Mobile
*  描述：字符串形式给定一个叶子结点带权重的二叉树天平，要求天平平衡的情况下，最少要改动多少叶子的权重。
*  思路：二叉树的结构确定的情况下，任意一个叶子结点的权重确定了，要使得二叉树平衡，那么其他叶子结点的权重就同时确定了。这道题的关键是两步，确定二叉树的结构（使用stack)，确定叶子权重的更新方法。进一步分析可以发现，最深的叶子权重最小，其他叶子的权重都是他的2的幂次倍。深度每少1，权重2倍。进一步理解题意，最少要改动多少个叶子的权重，其实就是最多可以保留多少个叶子的权重!如果一个都不能保留，就是全部改动。可以一个个的试着保留，然后看保留那个改动的最少，这样就能得到答案了。
*
*/

#include <iostream>
#include <string>
#include <sstream>
#include <stack>
#include <vector>
#include <algorithm>
#include <cmath>

using namespace std;
const int maxn = 65538*2;
struct Node
{
	int w;		//weight. 叶子结点的权重，非叶子结点w无意义。
	int d;				//depth. 根为0
	int l;				//left child
	int r;				//right child
	
	Node() : d(-1), l(0), r(0){}
	Node(int w_) : w(w_), d(-1), l(0), r(0){}
};

Node node[maxn];

int n = 0;
int newNode(int w)
{
	node[++n].w = w;
	return n;
}

int newNode(int l, int r)
{
	node[++n].l = l;
	node[n].r = r;
	return n;
}

void makedepth(int r, int d)
{
	node[r].d = d;
	if (node[r].l)
		makedepth(node[r].l, d+1);
	if (node[r].r)
		makedepth(node[r].r, d+1);
}

vector<int> terminal;

//单个结点的情况进入之前排除
int buildtree(string s)
{
	stack<int> st;
	int r;
	for(int i = 0; i < s.size(); i++)
	{
		if(']' == s[i])
		{
			int ch[2];
			for(int j = 0; j < 2; j++)
			{
				ch[j] = st.top(); 
				st.pop();
				if (ch[j] < 0)
					ch[j] = -ch[j];
				else
				{
					ch[j] = newNode(ch[j]);
					terminal.push_back(ch[j]);
				}
			}
			st.push(-newNode(ch[1], ch[0]));
		}
		else if(s[i] >= '1' && s[i] <= '9')
		{
			stringstream ss(s.substr(i));
			int w;
			ss>>w;
			st.push(w);
			for(i += 1; s[i] >= '0' && s[i] <= '9'; i++);
			i--;
		}
	}
	return -st.top();
}

void printtree(int r)
{
	int res, len;
	res = len = terminal.size();
	for(int i = 0; i < len; i++)
	{
		int d = node[terminal[i]].d;
		int w = node[terminal[i]].w;
		int c = 0;
		for(int j = 0; j < len; j++)
		{
			if (j == i)
				continue;
			if (node[terminal[j]].d <= d)
				c += (node[terminal[j]].w == w*pow(2, d-node[terminal[j]].d)) ? 0 : 1;
			else 
				c += (node[terminal[j]].w*pow(2, node[terminal[j]].d-d) == w) ? 0 : 1;
		}
		if (c < res)
			res = c;
	}
	cout<<res<<endl;
}

int main()
{
	int T;
	cin>>T;
	while(T--)
	{
		string s;
		int r, res;
		cin>>s;
		if (s[0] >= '1' && s[0] <= '9')
		{
			cout<<0<<endl;
			continue;
		}
		r = buildtree(s);
		makedepth(r, 0);
		printtree(r);
		
		for(int i = 1; i <= n; i++)
		{
			node[i].d = -1;
			node[i].l = node[i].r = 0;
		}
		n = 0;
		terminal.clear();
	}
}
