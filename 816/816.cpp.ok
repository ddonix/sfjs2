#include <iostream> 
#include <vector>
#include <stack>
#include <queue>
#include <cstring>

using namespace std;


int maze[10][10][4][4];
int idx[10][10][4];

struct Node
{
	int r;
	int c;
	int d;
	Node(){};
	Node(int rr, int cc, int dd) : r(rr), c(cc), d(dd){};

	bool operator !=(const Node & right)
	{
		return (r != right.r) || (c != right.c) || (d != right.d); 
	}
};

Node father[10][10][4];
Node snode;
Node enode;
char sdirect;

bool bfs()
{
	queue<pair<Node, Node> > q;
	if('N' == sdirect) q.push(make_pair(Node(snode.r-1, snode.c, 0), snode));
	if('S' == sdirect) q.push(make_pair(Node(snode.r+1, snode.c, 1), snode));
	if('W' == sdirect) q.push(make_pair(Node(snode.r, snode.c-1, 2), snode));
	if('E' == sdirect) q.push(make_pair(Node(snode.r, snode.c+1, 3), snode));
	
	while(!q.empty())
	{
		int r, c, direct;
		pair<Node, Node>  w = q.front();
		q.pop();
		
		r = w.first.r;
		c = w.first.c;
		direct = w.first.d;
		if (idx[r][c][direct])
			continue;
		
		idx[r][c][direct] = 1;
		father[r][c][direct] = w.second;
		
		if ((r == enode.r) && (c == enode.c))
		{
			enode.d = direct;
			return true;
		}
		
		if(maze[r][c][direct][0]) 
		{
			q.push(make_pair(Node(r-1, c, 0), w.first));
		}
		if(maze[r][c][direct][1]) 
		{
			q.push(make_pair(Node(r+1, c, 1), w.first));
		}
		if(maze[r][c][direct][2])
		{
			q.push(make_pair(Node(r, c-1, 2), w.first));
		}
		if(maze[r][c][direct][3]) 
		{
			q.push(make_pair(Node(r, c+1, 3), w.first));
		}
	}
	return false;
}

string name;
void print_trace(bool ok)
{
	cout<<name<<endl;;
	if (!ok)
	{
		cout<<"  No Solution Possible"<<endl;
		return;
	}
	
	stack<Node> trace;
	
	int r, c, direct;
	Node n = enode;
	do
	{
		trace.push(n);
		Node t = n;
		n = father[t.r][t.c][t.d];
	}while(n != snode);
	trace.push(snode);
	
	int i = 1;
	while(!trace.empty())
	{
		n = trace.top();
		trace.pop();
		
		if (i%10 == 1)
			cout<<" ";
		cout<<" ("<<n.r<<","<<n.c<<")";
		if (i%10 == 0)
			cout<<endl;
		i++;
	}
	if((i-1)%10)
	       cout<<endl;	
}

int main()
{
	while(cin>>name && name != "END")
	{
		cin>>snode.r>>snode.c>>sdirect>>enode.r>>enode.c;
		snode.d = -1;
		
		//clear maze and idx
		memset(maze, 0, sizeof(maze));
		memset(idx, 0, sizeof(idx));
		memset(father, 0, sizeof(father));
		
		int r, c;
		//read maze
		while(cin>>r && r != 0)
		{
			cin>>c;
			string s;
			while(cin>>s && s!="*")
			{
				if('N' == s[0])
				{
					maze[r][c][0][1] = false;
					for(int i = 1; i < s.length(); i++)
					{
						if ('F' == s[i]) maze[r][c][0][0] = true;
						if ('L' == s[i]) maze[r][c][0][2] = true;
						if ('R' == s[i]) maze[r][c][0][3] = true;
					}
				}
				else if('S' == s[0])
				{
					maze[r][c][1][0] = false;
					for(int i = 1; i < s.length(); i++)
					{
						if ('F' == s[i]) maze[r][c][1][1] = true;
						if ('L' == s[i]) maze[r][c][1][3] = true;
						if ('R' == s[i]) maze[r][c][1][2] = true;
					}
				}
				else if('W' == s[0])
				{
					maze[r][c][2][3] = false;
					for(int i = 1; i < s.length(); i++)
					{
						if ('F' == s[i]) maze[r][c][2][2] = true;
						if ('L' == s[i]) maze[r][c][2][1] = true;
						if ('R' == s[i]) maze[r][c][2][0] = true;
					}
				}
				else
				{
					maze[r][c][3][2] = false;
					for(int i = 1; i < s.length(); i++)
					{
						if ('F' == s[i]) maze[r][c][3][3] = true;
						if ('L' == s[i]) maze[r][c][3][0] = true;
						if ('R' == s[i]) maze[r][c][3][1] = true;
					}
				}
			}
		}
		
		if (bfs())
			print_trace(1);
		else
			print_trace(0);
	}
}
