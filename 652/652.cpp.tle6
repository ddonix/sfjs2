#include <iostream>
#include <cstring>
#include <queue>
#include <string>
#include <algorithm>

using namespace std;

int fact[9];

const char direction[]={'l', 'r', 'u', 'd'};
const int dx[] = {0,  0, -1, 1};
const int dy[] = {-1, 1,  0, 0};
const int dd[4][3] = {{0,2,3}, {1,2,3}, {0,1,2}, {0,1,3}};

typedef int State[9];

int encode(State s)	//encode
{
	int code = 0;
	for(int i = 8; i > 0; i--)
	{
		int m = 0;
		for(int j = 0; j < i; j++)
			if (s[j] > s[i]) m++;
		code += fact[i]*m;
	}
	return code;
}
	
	
State bg, ed;		//begin state , end state
int bgc, edc;
bool vis[362880];	//9! = 362880
State state[362880];	//所有state
int fa[362880];		//father	print路径
int di[362880];		//direction

int insertstate(State s)
{
	int code = encode(s);
	if (state[code][0] < 0)
		memcpy(state+code, s, sizeof(State));
	return code;
}

int nextState(State s, int d, State ns)
{
	int p,x,y;
	for(p = 0; s[p]; p++);
	x =  p/3+dx[d];
	y =  p%3+dy[d];
	if (x < 0 || x > 2 || y < 0 || y > 2)
		return -1;
	
	for(int i = 0; i < 9; i++)
		ns[i] = s[i];

	ns[p] = s[x*3+y];
	ns[x*3+y] = 0;
	return insertstate(ns);
}

void init()
{
	int b = 1;
	for(int i = 1; i < 9; i++)
	{
		b *=  i;
		fact[i] = b;
	}
	for(int i = 0; i < 362880; i++)
		state[i][0] = -1;
	
	for(int i = 0; i < 8; i++)
		ed[i] = i+1;
	ed[8] = 0;
	edc = insertstate(ed);
}

void bfs()
{
	queue<int> q;
	int code;
	q.push(bgc);
	vis[bgc] = true;
	
	while(!q.empty())
	{
		code = q.front();
		q.pop();
		State next;
		int ncode;
		
		if (code == edc)
			break;

		int d = di[code];
		for(int i = 0; i < 3; i++)
		{
			ncode = nextState(state[code], dd[d][i], next);
			if (ncode >= 0)
			{
				if (!vis[ncode])
				{
					vis[ncode] = true;
					fa[ncode] = code;
					di[ncode] = dd[d][i];
					q.push(ncode);
				}
			}
		}
	}
	if (!vis[edc])
		cout<<"unsolvable"<<endl;
	else
	{
		string ans;
		int cur = edc;
		while(cur != bgc)
		{
			ans = direction[di[cur]] + ans;
			cur = fa[cur];
		}
		cout<<ans<<endl;
	}
	cout<<endl;
}

int main()
{
	int T;
	char c;
	init();
	cin>>T;
	while(T--)
	{
		for(int i = 0; i < 9; i++)
		{
			cin>>c;
			bg[i] = (c == 'x' ? 0 : c-'0');
		}
		bgc = insertstate(bg);
		memset(vis, 0, sizeof(vis));
		bfs();
	}
}
