/* uva 11853:Paintball
* 思路：如果障碍物隔绝了南北，那么不能从东到西。
* 反之如果不能从东到西，则隔绝了南北。
* 对攻击范围达到北边界的所有敌人，分别作dfs或者bfs，看看能否到达南边界。
*/
#include <cstdio>
#include <cstring>
#include <cmath>
using namespace std;

const int maxn = 1000;
struct Oppo
{
	double x,y;
	double r;
	double t;
	double rr;
	bool ne;	//含北界
	bool se;	//含南界
	Oppo(){};
	Oppo(double x1, double y1, double r1):x(x1), y(y1), r(r1)
	{
		t = x*x+y*y;
		rr = r*r;
		ne = (y+r) >= 1000 ? true : false;
		se = r >= y? true : false;
	}
	
	bool isCon(const Oppo & b) const
	{
		return (t+b.t) <= (rr+b.rr+2*(r*b.r+x*b.x+y*b.y)) ? true : false;
	}
};

int n;
Oppo oppo[maxn];
int G[maxn][maxn];
bool vis[maxn];

bool dfs(int u)
{
	if(oppo[u].se)
		return true;
	for(int i = 0; i < n; i++)
	{
		if(!vis[i])	//!vis[i]  ==> i != u
		{
			if (!G[u][i])
				G[u][i] = G[i][u] = (oppo[u].isCon(oppo[i]) ? 1 : -1);
			if (1 == G[u][i])
			{
				vis[i] = 1;
				if(dfs(i))
					return true;
			}
		}
	}
	return false;
};

int main()
{
	while(scanf("%d", &n)==1)
	{
		double x,y,r;
		bool nsc;	//north south connect
		for(int i = 0; i < n; i++)
		{
			scanf("%lf%lf%lf", &x, &y, &r);
			oppo[i] = Oppo(x, y, r);
		}
		nsc = false;
		
		memset(vis, 0, n*sizeof(int));
		for(int i = 0; i < n; i++)
			memset(G[i], 0, sizeof(int)*n);
		
		for(int i = 0; i < n; i++)
		{
			if (!vis[i] && oppo[i].ne)
			{
				vis[i] = 1;
				if (nsc = dfs(i))
					break;
			}
		}
		if(nsc)
			printf("IMPOSSBILE\n");
		else
		{
			double wn=1000, en=1000;
			double t;
			for(int i = 0; i < n; i++)
			{
				Oppo & a = oppo[i];
				if (a.ne)
				{
					if (a.r >= a.x)
					{
						t = a.y - pow((a.rr-a.x*a.x), 0.5);
						if(wn > t) 
							wn = t;
					}
					else if (oppo[i].r >= (1000-oppo[i].x))
					{
						t = a.y - pow((a.rr-(1000-a.x)*(1000-a.x)), 0.5);
						if(en > t)
							en = t;
					}
				}
			}
			printf("%.2lf %.2lf %.2lf %.2lf\n", 0.0, wn, 1000.0, en);
		}
	}
}
