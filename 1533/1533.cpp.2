/* uva 1533: Moving Pegs
 * 	题意：15个格子的跳跳棋盘上，有一个空格，14个弹子。一个弹子可以跳过同一条直线上的一个或者几个弹子，跳到一个洞里去。被跳过的弹子
 * 	      同时被拾起。要求经过最少的走步，使得棋盘上就只剩下一个弹子，并且弹子在最初的空格上。输出移动的步数，和每一步移动的位置。
 * 	分析：这是一道水题
 * 	      15个结点，每个结点有2种状态（有弹子或者没有).最多有pow(2,15)=32768种状态.
 * 	思路：
 * 	      1.暴力解法，bfs枚举所有状态.
 */

#include <iostream>
#include <cstring>
#include <string>
#include <queue>
#include <stack>
#include <vector>
#include <sstream>
using namespace std;

int vis[32768];
unsigned long bits[16] = {	0x1,	0x2,	0x4,	0x8, 0x10,	0x20,	0x40,	0x80,
				0x100,	0x200,	0x400,	0x800, 0x1000,	0x2000,	0x4000,	0x8000};

const int G[8][6] = {	{0, 1, 3, 6, 10, -1},
			{2, 4, 7, 11, -1},
			{5, 8, 12, -1},
			{0, 2, 5, 9, 14, -1},
			{1, 4, 8, 13, -1},
			{3, 7, 12, -1},
			{3, 4, 5, -1},
			{6, 7, 8, 9, -1}

};
vector<vector<int> > trace[15];


//最后的状态，用来进行结果输出

int pre[32768];
int edc;
int sp;

void initialize()
{
	for(int i = 0; i < 8; i++)
	{
		int l = 0;
		for(l = 0; G[i][l] != -1; l++);
		for(int j = 0; j < l; j++)
		{
			if (j >= 2)
			{
				vector<int> v;
				for(int k = 0; k < j; k++)
					v.push_back(G[i][k]);
				trace[G[i][j]].push_back(v);
			}
			if (l-j > 2)
			{
				vector<int> v;
				for(int k = l-1; k > j; k--)
					v.push_back(G[i][k]);
				trace[G[i][j]].push_back(v);
			}
		}
	}
	for(int i = 0; i < 15; i++)
	{
		cout<<i<<": "<<endl;
		for(int j = 0; j < trace[i].size(); j++)
		{
			for(int k = 0; k < trace[i][j].size(); k++)
				cout<<trace[i][j][k]<<" ";
			cout<<endl;
		}
	}
}

void printproc()
{
	/*
	stack<int> sta;
	int code = edc;
	while(code != -1)
	{
		sta.push(code);
		code = pre[code];
	}
	int v1[maxn],v2[maxn];
	code = sta.top();
	sta.pop();
	rhash(code, v1);
	
	while(!sta.empty())
	{
		int v2[maxn];
		int dd[2];
		code = sta.top();
		sta.pop();
		rhash(code, v2);
		for(int i = 0, d = 0; i < n && d < 2; i++)
		{
			if (v2[i] != v1[i])
				dd[d++] = i;
		}
		if (v1[dd[0]])
			cout<<dd[0]+1<<' '<<dd[1]+1<<endl;
		else
			cout<<dd[1]+1<<' '<<dd[0]+1<<endl;
		for(int i = 0; i < n; i++)
			v1[i] = v2[i];
	}*/
}

int bfs()
{
	queue<int> q;
	int code = 0;
	for(int i = 0; i < 15; i++)
		if (i != sp)
			code |= bits[i];
	
	q.push(code);
	vis[code] = 1;
	pre[code] = -1;

	while(!q.empty())
	{
		code = q.front();
		q.pop();

		
		if (code == edc)
			return vis[code]-1;
		/*
		int v[maxn];
		rhash(code, v);
		for(int i = 0; i < n; i++)
		{
			if (v[i] != 0)
			{
				for(int j = 0; j < n; j++)
				{
					if (j == i || v[j] || !G[i][j])
						continue;
					int ncode;
					v[j] = v[i];
					v[i] = 0;
					ncode = dhash(v);
					v[i] = v[j];
					v[j] = 0;
					
					if (!vis[ncode])
					{
						vis[ncode] = vis[code]+1;
						pre[ncode] = code;
						q.push(ncode);
					}
				}
			}
		}
		*/
	}
	return -1;
}

int main()
{
	int T,r;
	initialize();
	cin>>T;
	while(T--)
	{
		cin>>sp;
		edc = bits[sp];
		r = bfs();
		cout<<r<<endl;
		if (r > 0)
			printproc();
		cout<<endl;
	}
}
