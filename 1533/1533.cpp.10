/* uva 1533: Moving Pegs
 * 	题意：15个格子的跳跳棋盘上，有一个空格，14个弹子。一个弹子可以跳过同一条直线上的一个或者几个弹子，跳到一个洞里去。被跳过的弹子
 * 	      同时被拾起。要求经过最少的走步，使得棋盘上就只剩下一个弹子，并且弹子在最初的空格上。输出移动的步数，和每一步移动的位置。
 * 	分析：这是一道水题
 * 	      15个结点，每个结点有2种状态（有弹子或者没有).最多有pow(2,15)=32768种状态.
 * 	思路：
 * 	      1.暴力解法，bfs枚举所有状态.
 * 	ps:   哪里说多个解输出字典序最小了！！！！坑！！！
 */

#include <iostream>
#include <cstring>
#include <string>
#include <queue>
#include <vector>
#include <sstream>
using namespace std;

unsigned long bits[16] = {	0x1,	0x2,	0x4,	0x8, 0x10,	0x20,	0x40,	0x80,
				0x100,	0x200,	0x400,	0x800, 0x1000,	0x2000,	0x4000,	0x8000};

const int G[9][5] = {	{5, 8, 12}, {2, 4, 7, 11}, {0, 1, 3, 6, 10},
			{3, 7, 12}, {1, 4, 8, 13}, {0, 2, 5, 9, 14},
			{3, 4, 5}, {6, 7, 8, 9}, {10, 11, 12, 13, 14}};


vector<int> J[15][15];	//b跳到e，需要跳过v。v为空，表示b不能跳到e.
int table1[15];
string table2[15];

int vis[32768];
int pre[32768];		
int ans[32768][2];

int edc;

bool isjump(int b, int e, int code, int & ncode)
{
	for(int i = 0; i < J[b][e].size(); i++)
		if (!(code & bits[J[b][e][i]]))
			return false;
	ncode |= bits[e];
	ncode &= ~bits[b];
	for(int i = 0; i < J[b][e].size(); i++)
		ncode &= ~bits[J[b][e][i]];
	return true;
}

void initialize()
{
	for(int b = 0; b < 15; b++)
		for(int e = 0; e < 15; e++)
		{
			if (e == b)
				continue;
			for(int i = 0; i < 9; i++)
			{
				int b1 = -1, e1 = -1;
				int l = 3+i%3;
				for(int j = 0; j < l && (b1 < 0 || e1 < 0); j++)
				{
					b1 = (G[i][j] == b) ? j : b1;
					e1 = (G[i][j] == e) ? j : e1;
				}
				int a1 = (b1 < e1) ? b1 : e1;
				int a2 = (b1 < e1) ? e1 : b1;
				if (a1 < 0 || (a2 - a1) < 2)
					continue;
				for(int j = a1+1; j < a2; j++)
					J[b][e].push_back(G[i][j]);
				break;
			}
		}
}

void printproc(string & s)
{
	vector<int> v;
	stringstream ss;
	int code = edc;
	while(code != -1)
	{
		v.push_back(code);
		code = pre[code];
	}
	int i = v.size()-2;
	ss<<ans[v[i]][0]+1<<" "<<ans[v[i]][1]+1;
	for(i--; i >= 0; i--)
		ss<<" "<<ans[v[i]][0]+1<<" "<<ans[v[i]][1]+1;
	s = ss.str();
}

int bfs()
{
	queue<int> q;
	int code = 0;

	code = 0x7fff & ~edc;
	q.push(code);
	memset(vis, 0, sizeof(vis));
	memset(pre, 0, sizeof(pre));
	vis[code] = 1;
	pre[code] = -1;
		
	while(!q.empty())
	{
		code = q.front();
		q.pop();

		if (code == edc)
			return vis[code]-1;

		for(int i = 0; i < 15; i++)
		{
			if (!(code & bits[i]))
				continue;
			for(int j = 0; j < 15; j++)
			{
				int ncode = code;
				if (j == i)
					continue;
				if (!(code & bits[i]) || (code & bits[j]) || J[i][j].empty())
					continue;
				if (isjump(i, j, code, ncode))
				{
					if (!vis[ncode])
					{
						q.push(ncode);
						vis[ncode] = vis[code]+1;
						pre[ncode] = code;
						ans[ncode][0] = i;
						ans[ncode][1] = j;
					}
				}
			}
		}
	}
	return -1;
}

int main()
{
	int T,r,sp;
	initialize();
	for(int i = 0; i < 15; i++)
	{
		edc = bits[i];
		r = bfs();
		table1[i] = r;
		printproc(table2[i]);
	}
	cin>>T;
	while(T--)
	{
		cin>>sp;
		cout<<table1[sp-1]<<endl;
		cout<<table2[sp-1]<<endl;
	}
}
