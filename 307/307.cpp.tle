/* uva 307: Sticks
 * 	题意：一些长度相同的棍子，被随意砍成n份，每一份的长度都不超过50.
 * 	      要求根据砍断之后的n份小棍子，还原原先棍子可能长度的最小值。
 * 	分析：乍一看水题，仔细分析有难度！一根棍子可以被砍成很多段，多根棍子还原的次数就难以
 * 	      计算。
 * 	思路：1.ida
 * 	      2.深度增加策略：所有的长度，必须大于等于砍断后最长的那根棍子长度，小于等于所有棍子
 * 	      长度之和。并且，是所有棍子长度之和的约数。
 * 	      3.判断当前深度是否满足条件：将所有棍子按长到短排序，每次第归组装当前剩余棍子中的
 * 	      最长棍子.
 */
#include <iostream>
#include <vector>
#include <algorithm>
using namespace std;

vector<int> stick;
int n;			//棍子数量
int ac;			//棍子长度总和
int ans;		//答案，也就是ida的深度

vector<int> candidate;	//候选答案
vector<bool> vis;	//

bool dfs(int s, int r)
{
	if(s == n)
		return true;
	if (0 == r)
	{
		int i;
		for(i = 0; i < n && vis[i]; i++);
		if (i == n)
			return true;
		vis[i] = true;
		if (dfs(i, ans-stick[i]))
			return true;
		vis[i] = false;
		return false;
	}
	for(int i = 0; i < n; i++)
	{
		if (i == s || vis[i] || stick[i] > r)
			continue;
		vis[i] = true;
		if (dfs(s, r-stick[i]))
			return true;
		vis[i] = false;
	}
	return false;
}

int main()
{
	while(cin>>n && n)
	{
		stick.resize(n);
		vis.resize(n);
		int maxs = 0, t;
		ac = 0;
		for(int i = 0; i < n; i++)
		{
			cin>>t;
			maxs = (t > maxs) ? t : maxs;
			ac += t;
			stick[i] = t;
		}
		
		candidate.clear();
		for(int a = maxs; a <= ac; a++)
			if (ac%a == 0)
				candidate.push_back(a);
		
		sort(stick.begin(), stick.end(), greater<int>());
		for(int i = 0; i < candidate.size(); i++)
		{
			ans = candidate[i];
			for(int i = 0; i < n; i++)
				vis[i] = false;
			vis[0] = true;
			if (dfs(0, ans-stick[0]))
				break;
		}
		cout<<ans<<endl;
	}
}


