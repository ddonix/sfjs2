/* 思路：关键是判重！！！试试看切片思想
 * 
*/
#include <iostream>
#include <vector>
#include <set>
using namespace std;

const int maxn = 10;
int w,h, n;

bool cmpvec(vector<int> & v1, vector<int> &v2, int n)
{
	int i;
	for(i = 0; i < n && v1[i] == v2[i]; i++);
	if(i == n)
		return true;
	for(i = 0; i < n && v1[i] == v2[n-1-i]; i++);
		return i == n;
}

struct Polyom
{
	set<pair<int, int> > c;
	int l, r, u, d;
	int xr, yr;
	bool operator!=(const Polyom & r) const
	{
		return !(*this == r);
	}

	bool operator==(const Polyom  & r) const
	{
		if(!((xr == r.xr && yr == r.yr) || (xr == r.yr && yr == r.xr)))
			return false;

		vector<int> xcut1, xcut2;
		vector<int> ycut1, ycut2;
		cut(xcut1, ycut1);
		r.cut(xcut2, ycut2);

		if (xr == yr)
		{
			if (cmpvec(xcut1, xcut2, xr) && cmpvec(ycut1, ycut2, xr))
				return true;
			if (cmpvec(xcut1, ycut2, xr) && cmpvec(ycut1, xcut2, xr))
				return true;
			return false;
		}
		if (xr == r.xr)
			return cmpvec(xcut1, xcut2, xr) && cmpvec(ycut1, ycut2, xr);
		else
			return cmpvec(xcut1, ycut2, xr) && cmpvec(ycut1, xcut2, xr);
	}

	void cut(vector<int> & xa, vector<int> & ya) const
	{
		xa.resize(xr);
		ya.resize(yr);
		for(int i = 0; i < xr; i++)
			xa[i] = 0;
		for(int i = 0; i < yr; i++)
			ya[i] = 0;
		for(auto it = c.begin(); it != c.end(); it++)
		{
			pair<int, int> pa = *it;
			xa[pa.first-l]++;
			ya[pa.second-d]++;
		}
	}
};

vector<Polyom> se[maxn];

int ans;
int dx[] = { 0, 0, -1, 1};
int dy[] = {-1, 1,  0, 0};

void buildtable()
{
	Polyom p1;
	p1.c.insert(make_pair(0,0));
	p1.l = p1.r = p1.u = p1.d = 0;
	p1.xr = p1.yr = 1;
	se[0].push_back(p1);

	for(int i = 1; i < maxn; i++)
	{
		for(auto it = se[i-1].begin(); it != se[i-1].end(); it++)
		{
			for(auto it2 = (*it).c.begin(); it2 != (*it).c.end(); it2++)
			{
				for(int d = 0; d < 4; d++)
				{
					int x = (*it2).first+dx[d], y = (*it2).second+dy[d];
					pair<int, int> pa = make_pair(x,y);
					if ((*it).c.count(pa))
						continue;
					Polyom np;
				        np = (*it);
					np.c.insert(pa);
					np.r = (x > np.r) ? x : np.r;
					np.l = (x < np.l) ? x : np.l;
					np.u = (y > np.u) ? y : np.u;
					np.d = (y < np.d) ? y : np.d;
					np.xr = np.r - np.l + 1;
					np.yr = np.u - np.d + 1;
					int j;
					for(j = 0; j < se[i].size() && se[i][j] != np; j++);
					if (j == se[i].size())
						se[i].push_back(np);
				}
			}
		}
		cout<<i+1<<" "<<se[i].size()<<endl;
	}
}

int main()
{
	buildtable();
	while(cin>>n>>w>>h)
	{
		int t;
		if (w > h)
		{
			t = w;
			w = h;
			t = t;
		}
		ans = 0;
		for(int i = 0; i < se[n-1].size(); i++)
		{
			if (se[n-1][i].xr <= w && se[n-1][i].yr <= h)
				ans++;
			else if (se[n-1][i].yr <= w && se[n-1][i].xr <= h)
				ans++;
		}
		cout<<ans<<endl;
	}
}
