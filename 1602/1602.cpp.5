/* 思路：1.判重！！！试试看切片思想
 * 	 2.减少枚举次数！！！对称的，之枚举一边。
 * 
*/
#include <iostream>
#include <vector>
#include <set>
using namespace std;

const int maxn = 9;
int w,h, n;

bool cmpvec(vector<int> & v1, vector<int> &v2, int n)
{
	int i;
	for(i = 0; i < n && v1[i] == v2[i]; i++);
	if(i == n)
		return true;
	for(i = 0; i < n && v1[i] == v2[n-1-i]; i++);
		return i == n;
}

struct Polyom
{
	set<pair<int, int> > c;
	int l, r, u, d;
	int xr, yr;
	bool xbalance, ybalance;
	bool operator!=(const Polyom & r) const
	{
		return !(*this == r);
	}

	bool isxbalance()//x轴上对称，左右对称，关于y轴对称
	{
		for(auto it = c.begin(); it != c.end(); it++)
			if (c.count(make_pair(l+r-(*it).first, (*it).second)) < 1)
				return false;
		return true;
	}
	
	bool isybalance()
	{
		for(auto it = c.begin(); it != c.end(); it++)
			if (c.count(make_pair((*it).first, u+d-(*it).second)) < 1)
				return false;
		return true;
	}

	bool operator==(const Polyom  & r) const
	{
		if(!((xr == r.xr && yr == r.yr) || (xr == r.yr && yr == r.xr)))
			return false;

		vector<int> xcut1, xcut2;
		vector<int> ycut1, ycut2;
		cut(xcut1, ycut1);
		r.cut(xcut2, ycut2);

		if (xr == yr)
		{
			if (cmpvec(xcut1, xcut2, xr) && cmpvec(ycut1, ycut2, xr))
				return true;
			return cmpvec(xcut1, ycut2, xr) && cmpvec(ycut1, xcut2, xr);
		}
		if (xr == r.xr)
			return cmpvec(xcut1, xcut2, xr) && cmpvec(ycut1, ycut2, yr);
		else
			return cmpvec(xcut1, ycut2, xr) && cmpvec(ycut1, xcut2, yr);
	}

	void cut(vector<int> & xa, vector<int> & ya) const
	{
		xa.resize(xr);
		ya.resize(yr);
		for(int i = 0; i < xr; i++)
			xa[i] = 0;
		for(int i = 0; i < yr; i++)
			ya[i] = 0;
		for(auto it = c.begin(); it != c.end(); it++)
		{
			pair<int, int> pa = *it;
			xa[pa.first-l]++;
			ya[pa.second-d]++;
		}
	}
};

vector<Polyom> se[maxn];

int ans;
int dx[] = { 0, 0, -1, 1};
int dy[] = {-1, 1,  0, 0};

void buildtable()
{
	Polyom p1;
	p1.c.insert(make_pair(0,0));
	p1.l = p1.r = p1.u = p1.d = 0;
	p1.xr = p1.yr = 1;
	p1.xbalance = p1.ybalance = true;
	se[0].push_back(p1);

	for(int i = 1; i < maxn; i++)
	{
		for(auto it = se[i-1].begin(); it != se[i-1].end(); it++)
		{
			Polyom & p = *it;
			for(auto it2 = p.c.begin(); it2 != p.c.end(); it2++)
			{
				if (p.xbalance && (*it2).first < (p.r+p.l + 1)/2)
					continue;
				if (p.ybalance && (*it2).second < (p.u+p.d + 1)/2)
					continue;
				for(int d = 0; d < 4; d++)
				{
					int x = (*it2).first+dx[d], y = (*it2).second+dy[d];
					bool iflag = false;
					Polyom np = p;
					if (x > np.r)
					{
						np.r = x;
						iflag = true;
						if (x+np.l > 1)	
							continue;
					}
					else if (x < np.l)
					{
						np.l = x;
						iflag = true;
						if (x+np.r < -1)	
							continue;
					}
				        else if (y > np.u)
					{
						np.u = y;
						iflag = true;
						if (y+np.d > 1)	
							continue;
					}	
					else if (y < np.d)
					{
						np.d = y;
						iflag = true;
						if (y+np.u < -1)	
							continue;
					}	
					pair<int, int> pa = make_pair(x,y);
					if (iflag)
						np.c.insert(pa);
					else if (np.c.count(pa) < 1)
						np.c.insert(pa);
					else
						continue;
					np.xr = np.r - np.l + 1;
					np.yr = np.u - np.d + 1;
					int j;
					for(j = 0; j < se[i].size() && se[i][j] != np; j++);
					if (j == se[i].size())
					{
						np.xbalance = np.isxbalance();
						np.ybalance = np.isybalance();
						se[i].push_back(np);
					}
				}
			}
		}
		cout<<i+1<<" "<<se[i].size()<<endl;
	}
}

int main()
{
	buildtable();
	while(cin>>n>>w>>h)
	{
		int t;
		if (w > h)
		{
			t = w;
			w = h;
			t = t;
		}
		ans = 0;
		for(int i = 0; i < se[n-1].size(); i++)
		{
			if (se[n-1][i].xr <= w && se[n-1][i].yr <= h)
				ans++;
			else if (se[n-1][i].yr <= w && se[n-1][i].xr <= h)
				ans++;
		}
		cout<<ans<<endl;
	}
}
