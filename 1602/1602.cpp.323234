/* 思路：1.判重！！！切片思想.给每个连通块按x,y轴分别切片，并把切片编号.判断是否重合，就看编号是否相同。
 * 	 2.减少枚举次数！！！对称的，只枚举一边。
 * 
*/
#include <iostream>
#include <vector>
#include <set>
#include <cstring>
#include <algorithm>
using namespace std;

const int maxn = 10;

struct Polyom
{
	set<pair<int, int> > c;
	int l, r, u, d;

	void normal()
	{
		
		set<pair<int, int> > nc;
		for(auto it = c.begin(); it != c.end(); it++)
			nc.insert(make_pair((*it).first-l, (*it).second-d));
		c = nc;
		r -= l;
		u -= d;
		l = d = 0;
	}

	void flip()
	{
		set<pair<int, int> > nc;
		for(auto it = c.begin(); it != c.end(); it++)
			nc.insert(make_pair((*it).first-l, -(*it).second+u));
		c = nc;
		r -= l;
		l = 0;
		u -= d;
		d = 0;
	}

	void rotate()
	{
		set<pair<int, int> > nc;
		for(auto it = c.begin(); it != c.end(); it++)
			nc.insert(make_pair((*it).second-d, -(*it).first+r));
		c = nc;
		int rr = r, ll = l;
		r = u-d;
		l = 0;
		u = rr-ll;
		d = 0;
	}
};

vector<Polyom> se[maxn];

int dx[] = { 0, 0, -1, 1};
int dy[] = {-1, 1,  0, 0};

void buildtable()
{
	se[0].resize(1);
	Polyom & p1 = se[0][0];
	p1.c.insert(make_pair(0,0));
	p1.l = p1.r = p1.u = p1.d = 0;
	
	for(int i = 1; i < maxn; i++)
	{
		for(auto it = se[i-1].begin(); it != se[i-1].end(); it++)
		{
			Polyom & p = *it;
			for(auto it2 = p.c.begin(); it2 != p.c.end(); it2++)
			{
				for(int d = 0; d < 4; d++)
				{
					int x = (*it2).first+dx[d], y = (*it2).second+dy[d];
					pair<int, int> pa = make_pair(x, y);
					if (p.c.count(pa))
						continue;
					Polyom np = p;
					np.c.insert(pa);
					np.r = (x > np.r) ? x : np.r;
					np.l = (x < np.l) ? x : np.l;
					np.u = (y > np.u) ? y : np.u;
					np.d = (y < np.d) ? y : np.d;
					
					bool nf = true;
					for(int d1 = 0; d1 < 2 && nf && !se[i].empty(); d1++)
					{
						for(int j = 0; j < 4 && nf; j++)
						{
							np.rotate();
							for(auto it3 = se[i].begin(); it3 != se[i].end() && nf; it3++)
								if ((*it3).c == np.c)
									nf = false;
						}
						if (nf && d1 == 0)
							np.flip();
					}
					if (nf)
					{
						if (se[i].empty())
							np.normal();
						se[i].push_back(np);
					}
				}
			}
		}
		cout<<i+1<<" "<<se[i].size()<<endl;
	}
}

int main()
{
	int w,h,n;
	buildtable();
	while(cin>>n>>w>>h)
	{
		int ans = 0;
		for(int i = 0; i < se[n-1].size(); i++)
		{
			if (se[n-1][i].r < w && se[n-1][i].u < h)
				ans++;
			else if (se[n-1][i].u < w && se[n-1][i].r < h)
				ans++;
		}
		cout<<ans<<endl;
	}
}
